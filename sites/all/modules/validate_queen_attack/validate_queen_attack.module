<?php

function validate_queen_attack_menu() {
    $items = array();
    $items['validate_queen_attack'] = array(
        'title' => 'Queen Attack With Validation',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('validate_queen_attack_form'),
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );
    $items['validate_queen_attack_results'] = array(
        'title' => 'Queen Attack Results',
        'page callback' => 'validate_queen_attack_results',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    return $items;
}

function validate_queen_attack_form() {
    $position = array(0 => '1', 1 => '2', 2 => '3', 3 => '4', 4 => '5', 5 => '6', 6 => '7', 7 => '8');

    $form['queen_position_row'] = array(
        '#title' => 'Queen position (row)',
        '#type' => 'textfield',
        '#default_value' => 1,
        '#description' => t("Select the queen's row position by entering an integer from 1-8"),
        '#element_validate' => array('element_validate_integer_positive', 'element_validate_chess_range'),
        '#required' => TRUE,
    );
    $form['queen_position_col'] = array(
        '#title' => 'Queen position (col)',
        '#type' => 'textfield',
        '#default_value' => 1,
        '#description' => t("Select the queen's column position by entering an integer from 1-8"),
        '#element_validate' => array('element_validate_integer_positive', 'element_validate_chess_range'),
        '#required' => TRUE,
    );
    $form['other_position_row'] = array(
        '#title' => 'Other piece position (row)',
        '#type' => 'textfield',
        '#default_value' => 1,
        '#description' => t("Select the other's row position by entering an integer from 1-8"),
        '#element_validate' => array('element_validate_integer_positive', 'element_validate_chess_range'),
        '#required' => TRUE,
    );
    $form['other_position_col'] = array(
        '#title' => 'Other piece position (col)',
        '#type' => 'textfield',
        '#default_value' => 1,
        '#description' => t("Select the other's column position by entering an integer from 1-8"),
        '#element_validate' => array('element_validate_integer_positive', 'element_validate_chess_range'),
        '#required' => TRUE,
    );
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Select',
    );
    return $form;
}

function element_validate_chess_range($element) {
  if ($element['#value'] > 8 || $element['#value'] < 1) {
    form_error($element, t('Number must be between 1 and 8.'));
  }
}

function validate_queen_attack_form_validate($form, &$form_state) {
  if ($form_state['values']['queen_position_row'] == $form_state['values']['other_position_row'] &&
      $form_state['values']['queen_position_col'] == $form_state['values']['other_position_col']) {
      form_set_error('user_name', 'You cannot have two pieces on the same space.');
  }
}

function validate_queen_attack_form_submit($form, &$form_state) {
    $queen_row = $form_state['values']['queen_position_row'];
    $queen_col = $form_state['values']['queen_position_col'];
    $queen_loc = [$queen_row, $queen_col];

    $other_row = $form_state['values']['other_position_row'];
    $other_col = $form_state['values']['other_position_col'];
    $other_loc = [$other_row, $other_col];

    $_SESSION['final_results'] = queen_attack_find_results_after_valid($queen_loc, $other_loc);
    $form_state['redirect'] = 'validate_queen_attack_results';
}

function queen_attack_find_results_after_valid($queen_loc, $other_loc) {
  // row is 0 element of array, column is 1
  // if row = row, or col = col, or the distance between the row positions is equal to the distance between the column positions then queen can attack.
  return ($queen_loc[0] == $other_loc[0]) || ($queen_loc[1] == $other_loc[1]) || (abs($queen_loc[0] - $other_loc[0]) == abs($queen_loc[1] - $other_loc[1]));
}

function validate_queen_attack_results() {
    $output = "";
    if ($_SESSION['final_results'] == "1") {
        $output = "can";
    } else {
        $output = "can NOT";
    }
    return '<p>The queen ' . $output . ' attack the other piece.</p>';
}
